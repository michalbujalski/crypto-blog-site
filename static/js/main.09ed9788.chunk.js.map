{"version":3,"sources":["components/error-message/ErrorMessage.module.css","text-parser/index.tsx","components/input-text/InputText.component.tsx","components/formatted-text/FormattedText.component.tsx","components/error-message/ErrorMessage.component.tsx","components/loader/Loader.component.tsx","pages/blog-post/BlogPost.page.tsx","api/index.tsx","text-parser/coin-repository.tsx","pages/blog-post/BlogPost.container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Method","InputTextComponent","onChange","TextField","inputProps","fullWidth","multiline","event","target","value","FormattedTextComponent","formattedText","disabled","ErrorMessageComponent","errorMessage","Box","p","data-testid","className","styles","LoaderComponent","display","justifyContent","alignItems","mr","CircularProgress","BlogPostPage","text","handleChange","error","isLoading","Grid","container","item","xs","BASE_URL","fetchCoins","a","fetch","response","json","data","fetchPrice","coinId","symbol","quotes","price","currency","saveCoinToCache","coin","coinCache","set","getCoinFromCache","coinSymbol","get","Map","getCoin","forEach","Error","getCoinName","name","priceCache","savePriceToCache","coinPrice","getPriceFromCache","getCoinPrice","id","parsePrice","toLocaleString","undefined","style","parseMethod","rawMethod","Name","Price","parseTag","rawTag","sanitized","replace","split","method","argument","findTags","tagRegex","getTagRegex","match","exec","tags","push","replaceTagsWithValues","arr","reverse","parsedText","pop","parseText","rawText","requests","createRequests","Promise","all","values","map","tag","getCurrencyData","initState","BlogPostContainer","useState","state","setState","newText","message","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.09ed9788.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__1jSvR\"};","import { getCoinName, getCoinPrice } from './coin-repository';\n\nexport enum Method {\n  Name = 'Name',\n  Price = 'Price'\n};\n\nexport interface Tag {\n  method: Method,\n  argument: string\n}\n\nexport const parseMethod = (rawMethod: string): Method => {\n  switch(rawMethod){\n    case Method.Name:\n      return Method.Name;\n    case Method.Price:\n      return Method.Price;\n    default:\n      throw new Error(`Unknown method ${rawMethod}`);\n  }\n}\n\nexport const parseTag = (rawTag: string): Tag => {\n  const sanitized = rawTag.replace(/[ {}]/g,'').split('/');\n  return { method: parseMethod(sanitized[0]), argument: sanitized[1] };\n}\n\nexport const findTags = (text: string): Tag[] => {\n  const tagRegex = getTagRegex();\n  let match = tagRegex.exec(text);\n  let tags: Array<Tag> = [];\n  while( match != null ){\n    tags.push(parseTag(match[0]));\n    match = tagRegex.exec(text);\n  }\n  return tags;\n}\n\nconst getTagRegex = () => /{{( +)?\\w+( +)?\\/( +)?\\w+( +)?}}/g;\n\nexport const replaceTagsWithValues = (\n  arr: string[], text: string\n): string => {\n  const tagRegex = getTagRegex();\n  arr = arr.reverse();\n  let match = tagRegex.exec(text);\n  let parsedText = text;\n  while( match != null ){\n    const value = arr.pop()\n    if (value) {\n      parsedText = parsedText.replace(match[0], value);\n    }\n    match = tagRegex.exec(text);\n  }\n  return parsedText;\n}\n\nexport const parseText = async (rawText:string): Promise<string> => {\n  const tags = findTags(rawText);\n  const requests = createRequests(tags);\n  const values = await Promise.all(requests);\n  return replaceTagsWithValues(values, rawText);\n}\n\nexport const createRequests = (\n  tags: Tag[]\n):Array<Promise<string>> => (\n  tags.map((tag: Tag) => getCurrencyData(tag))\n)\n\nexport const getCurrencyData = (tag: Tag):Promise<string> => {\n  switch(tag.method){\n    case Method.Name:\n      return getCoinName(tag.argument);\n    case Method.Price:\n      return getCoinPrice(tag.argument);\n    default:\n      throw new Error(`Unknown method ${Method.Name}`);\n  }\n};","import React, { FunctionComponent } from 'react';\nimport { TextField } from '@material-ui/core';\n\ninterface InputTextProps {\n  onChange: (newText: string) => void\n}\nconst InputTextComponent: FunctionComponent<InputTextProps> = ({\n  onChange\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n  return (\n    <TextField\n      inputProps={{ \"data-testid\": \"textInput\" }}\n      fullWidth\n      multiline\n      onChange={handleChange}\n    />\n  )\n}\n\nexport default InputTextComponent;\n","import React, { FunctionComponent } from 'react';\nimport { TextField } from '@material-ui/core';\n\ninterface FormattedTextProps {\n  formattedText: string\n}\n\nconst FormattedTextComponent: FunctionComponent<FormattedTextProps> = ({\n  formattedText\n}) => {\n  return (\n    <TextField\n      disabled\n      fullWidth\n      multiline\n      value={formattedText}\n      inputProps={{ \"data-testid\": \"formattedText\" }}\n    />\n  );\n}\n\nexport default FormattedTextComponent;\n","import React, { FunctionComponent } from 'react';\nimport styles from './ErrorMessage.module.css';\nimport { Box } from '@material-ui/core';\n\ninterface ErrorMessageProps {\n  errorMessage: string\n};\n\nconst ErrorMessageComponent: FunctionComponent<ErrorMessageProps> = ({\n  errorMessage\n}) => {\n  return (\n    <Box p={2}>\n      <p\n        data-testid=\"errorMessage\"\n        className={styles.errorMessage}\n      >\n        {errorMessage}\n      </p>\n    </Box>\n  );\n}\n\nexport default ErrorMessageComponent;","import React, { FunctionComponent } from 'react';\nimport { Box, CircularProgress } from '@material-ui/core';\n\nconst LoaderComponent: FunctionComponent = () => {\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      data-testid=\"loader\"\n    >\n      <Box mr={2}><CircularProgress /></Box><span>Parsing</span>\n    </Box>\n  );\n}\n\nexport default LoaderComponent;\n","import React, { FunctionComponent } from 'react';\nimport { Grid, Box } from '@material-ui/core';\n\nimport InputTextComponent from '../../components/input-text/InputText.component';\nimport FormattedTextComponent from '../../components/formatted-text/FormattedText.component';\nimport ErrorMessageComponent from '../../components/error-message/ErrorMessage.component';\nimport LoaderComponent from '../../components/loader/Loader.component';\n\ninterface BlogPageProps {\n  isLoading: boolean,\n  text: string,\n  error: string|null,\n  handleChange: (newText: string) => void\n}\n\nconst BlogPostPage: FunctionComponent<BlogPageProps> = ({\n  text,\n  handleChange,\n  error,\n  isLoading\n}) => {\n  return (\n    <Grid container>\n      <Grid item xs={6}>\n        <Box p={2}>\n          <InputTextComponent onChange={handleChange}/>\n        </Box>\n      </Grid>\n      <Grid item xs={6}>\n        <Box p={2}>\n          <FormattedTextComponent formattedText={text}/>\n        </Box>\n      </Grid>\n      <Grid item xs={12}>\n        {error && <ErrorMessageComponent errorMessage={error}/>}\n      </Grid>\n      <Grid item xs={12}>\n        {isLoading && <LoaderComponent />}\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default BlogPostPage;","import { Coin, CoinPrice } from \"../text-parser/coin-repository\";\n\nconst BASE_URL = 'https://api.coinpaprika.com/v1'\n\nexport const fetchCoins = async (): Promise<Array<Coin>> => {\n  const response = await fetch(`${BASE_URL}/coins`);\n  const data = await response.json();\n  return data as Array<Coin>;\n}\n\nexport const fetchPrice = async (coinId: string): Promise<CoinPrice> => {\n  const response = await fetch(`${BASE_URL}/tickers/${coinId}`);\n  const data = await response.json();\n\n  return {\n    symbol: data.symbol,\n    value: data.quotes['USD'].price,\n    currency: 'USD'\n  } as CoinPrice\n};\n","import { fetchCoins, fetchPrice } from '../api';\n\nexport interface Coin {\n  id: string,\n  symbol: string,\n  name: string\n}\n\nexport const saveCoinToCache = (coin: Coin) => {\n  coinCache.set(coin.symbol, coin);\n}\n\nexport const getCoinFromCache = (coinSymbol: string) => coinCache.get(coinSymbol);\n\nexport const clearCache = () => {\n  priceCache.clear();\n  coinCache.clear();\n}\n\nconst coinCache = new Map<string, Coin>();\n\nexport const getCoin = async (coinSymbol: string): Promise<Coin> => {\n  if (!getCoinFromCache(coinSymbol)) {\n    const data = await fetchCoins();\n    data.forEach(coin => saveCoinToCache(coin));\n  }\n  const currency = coinCache.get(coinSymbol);\n  if (currency) {\n    return currency;\n  } else {\n    throw new Error(`No coin with code ${coinSymbol}`);\n  }\n}\n\nexport const getCoinName = async (coinSymbol: string): Promise<string> => {\n  const currency = await getCoin(coinSymbol);\n  return currency.name;\n}\n\nexport interface CoinPrice {\n  value: number,\n  currency: string,\n  symbol: string\n}\n\nconst priceCache = new Map<string, CoinPrice>();\n\nexport const savePriceToCache = (coinPrice: CoinPrice) => {\n  priceCache.set(coinPrice.symbol, coinPrice);\n}\n\nexport const getPriceFromCache = (coinSymbol: string) => priceCache.get(coinSymbol)\n\nexport const getCoinPrice = async (coinSymbol:string): Promise<string> => {\n  if (!getPriceFromCache(coinSymbol)) {\n    const coin: Coin = await getCoin(coinSymbol);\n    const coinPrice: CoinPrice = await fetchPrice(coin.id);\n    savePriceToCache(coinPrice);\n    return parsePrice(coinPrice.value);\n  }\n  const price = getPriceFromCache(coinSymbol);\n  if (price) {\n    return parsePrice(price.value);\n  }\n\n  throw new Error(`No price with code ${coinSymbol}`);\n}\n\nconst parsePrice = (price: number) => price.toLocaleString(undefined, {\n  style: 'currency',\n  currency: 'USD'\n});\n","import React, { FunctionComponent, useState } from 'react';\nimport BlogPostPage from './BlogPost.page';\nimport { parseText } from '../../text-parser';\n\ninterface BlogPostState {\n  isLoading: boolean,\n  text: string,\n  error: string|null\n}\n\nconst initState: BlogPostState = {\n  isLoading: false,\n  text: '',\n  error: null\n}\nconst BlogPostContainer: FunctionComponent = () => {\n  const [state, setState] = useState<BlogPostState>(initState);\n  const handleChange = (newText:string) => {\n    (async () => {\n      try {\n        setState({...state, isLoading: true});\n        const formattedText = await parseText(newText);\n        setState({...state, isLoading: false, error: null, text: formattedText});\n      } catch (error) {\n        setState({...state, isLoading: false, error: error.message, text: newText});\n      }\n    })();\n  }\n  return (\n    <BlogPostPage\n      {...state}\n      handleChange={handleChange}\n    />\n  );\n}\n\nexport default BlogPostContainer;\n","import React from 'react';\nimport BlogPostContainer from './pages/blog-post/BlogPost.container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BlogPostContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}